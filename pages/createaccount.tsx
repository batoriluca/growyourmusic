import Head from 'next/head'
import style from '../styles/createaccount.module.css'
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import React, { useEffect, useState } from "react"
import { useFormik } from 'formik';
import * as Yup from 'yup'
import { useRouter } from 'next/router';
import Cookies from 'js-cookie';
var jwt = require('jsonwebtoken');
import { parseCookies, setCookie, destroyCookie } from 'nookies'
import Script from 'next/script'

const initialValues = {
  email: "",
  username: "",
  password: "",
  cpassword: "",
}

export default function Home() {

  const [checkbox, setCheckbox] = useState(false)
  const tcError = {
    color: "red",
  }
  const router = useRouter();

  const handleClick = (e: { target: { name: string; }; }) => {
    if (e.target.name == "checkbox") {
      setCheckbox(!checkbox)
    }
  }

  const registerSchema = Yup.object({
    email: Yup.string().email("It must be an email").required("Please Enter Email ID"),
    username: Yup.string().min(3, "It must be at least 3 char").max(25).required("Please Enter Username"),
    password: Yup.string().min(6, "It must be at least 6 char").max(25).required("Please Enter Password"),
    cpassword: Yup.string().required("Please Enter Confirm Password").oneOf([Yup.ref("password"), null], "Both password must be match"),
  })

  const { values, errors, touched, handleBlur, handleChange, handleSubmit } = useFormik({
    initialValues: initialValues,
    validationSchema: registerSchema,

    onSubmit: async (values, action) => {
      // if (checkbox) {

      const username = values.username;
      const email = values.email;
      const password = values.password;

      const data = { username, email, password };

      let res = await fetch('http://localhost:3000/api/adduser', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      })

      let response = await res.json()

      if (response.success) {

        Cookies.set('token', response.token)
        localStorage.setItem('l_token', response.token)

        toast.success(response.msg, {
          position: "top-right",
          autoClose: 2500,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
        setTimeout(() => {
          router.push("/emailverif")
        }, 500);
        action.resetForm();
      } else {
        toast.error(response.msg, {
          position: "top-right",
          autoClose: 2500,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
      }
      // } else {
      //   toast.error('Please check the T & C', {
      //     position: "top-right",
      //     autoClose: 2500,
      //     hideProgressBar: false,
      //     closeOnClick: true,
      //     pauseOnHover: true,
      //     draggable: true,
      //     progress: undefined,
      //     theme: "light",
      //   });
      // }
    }
  })

  return (
    <>
      <Head>
        <title>Create New Post</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer
        position="top-right"
        autoClose={2500}
        hideProgressBar={false}
        newestOnTop={false}
        limit={5}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
      <div className={style.container}>
        <div className={style.sc1} id="sc1">
          <div className={style.intro}>
            <h3>Creează Cont</h3>
            <form onSubmit={handleSubmit}>
              <div>
                <input
                  type="email"
                  id="email"
                  onChange={handleChange}
                  onBlur={handleBlur}
                  value={values.email || ""}
                  name='email'
                  placeholder="Email"
                />
                {errors.email && touched.email ? <p className={style.from_error}>{errors.email}</p> : null}
              </div>
              <div>
                <input
                  type="text"
                  placeholder="Nume de utilizator"
                  maxLength={10}
                  id="username"
                  onChange={handleChange}
                  onBlur={handleBlur}
                  value={values.username || ""}
                  name='username'
                />
                {errors.username && touched.username ? <p className={style.from_error}>{errors.username}</p> : null}
              </div>
              <input
                type="password"
                id="password"
                name='password'
                placeholder="Parola"
                maxLength={20}
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.password || ""}
              />
              {errors.password && touched.password ? <p className={style.from_error}>{errors.password}</p> : null}
              <input
                type="password"
                id="cpassword"
                name='cpassword'
                placeholder="Parola"
                maxLength={20}
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.cpassword || ""}
              />
              {errors.cpassword && touched.cpassword ? <p className={style.from_error}>{errors.cpassword}</p> : null}
              <div className="lineRight" />
              <input
                type="submit"
                defaultValue="Verifică email-ul"
                className={style.submitPayment}
              />
            </form>
            <img src="/img/Group 16.png" className={style.logo} alt="" />
            <p>pentru artisti &amp; producatori la inceput de drum</p>
          </div>
        </div>
      </div>

    </>
  )
}


export async function getServerSideProps(ctx: any) {

  const { token } = parseCookies(ctx)

  if (!token) {

  } else {
    var decoded = jwt.decode(token);
    if (decoded.membership == 'inactive') {
      const { res } = ctx
      res.writeHead(302, { location: "/payment" })
      res.end()
    } else if (decoded.accstatus == 'pending') {
      const { res } = ctx
      res.writeHead(302, { location: "/setupacc" })
      res.end()
    } else {
      const { res } = ctx
      res.writeHead(302, { location: "/feed" })
      res.end()
    }
  }
  return {
    props: {}, // will be passed to the page component as props
  }
}